)
)
),
skin = "black"
)
server <- function(input, output, session) {
observeEvent(input$plot_button, {
selected_variables <- input$variables
g3_range <- input$g3_range  # Obtenir la plage sélectionnée pour la note G3
# Filtrer les données en fonction de la plage sélectionnée pour la note G3
filtered_data <- data %>%
filter(G3 >= g3_range[1] & G3 <= g3_range[2])
# Liste pour stocker les graphiques
plots <- list()
for (variable in selected_variables) {
# Créer un graphique ggplot avec la couleur turquoise et le titre explicatif
plot_data <- ggplot(filtered_data, aes(x = .data[[variable]])) +
geom_bar(fill = "turquoise") +
labs(x = variable, y = "Fréquence") +
ggtitle(explanations[[variable]]) +
theme(plot.title = element_text(hjust = 0.5, size = 10))
# Convertir le graphique ggplot en graphique interactif ggplotly
plotly_plot <- ggplotly(plot_data)
plots[[variable]] <- plotly_plot
}
# Générer les graphiques dans l'onglet "Graphiques"
output$plots_ui <- renderUI({
if (length(plots) == 0) {
return(NULL)
}
tagList(plots)
})
# Changer d'onglet vers "Graphiques" après avoir généré les graphiques
updateTabsetPanel(session, "tabs", selected = "graphiques")
})
}
shinyApp(ui, server)
# Créer un tableau de bord Shiny
ui <- dashboardPage(
dashboardHeader(title = "Test"),
dashboardSidebar(
sidebarMenu(
menuItem("Introduction", tabName = "introduction", icon = icon("info-circle"),
menuSubItem("Graphiques", tabName = "graphiques", icon = icon("chart-bar"))
)
)
),
dashboardBody(
tabItems(
tabItem(tabName = "introduction",
h2("Bienvenue dans l'application d'exploration des données !"),
p("Sélectionnez les variables que vous souhaitez explorer et cliquez sur 'Afficher les graphiques' pour voir les graphiques correspondants."),
br(),
h3("Instructions :"),
selectInput("variables", "Choisir des variables", multiple = TRUE, choices = colnames(data)),
# Ajouter un sélecteur de plage pour la note G3
sliderInput("g3_range", "Sélectionnez la plage pour la note G3",
min = 0, max = 20, value = c(0, 20)),
actionButton("plot_button", "Afficher les graphiques"),
HTML('<ul>
<li>Sélectionnez une ou plusieurs variables à partir du menu déroulant.</li>
<li>Sélectionnez la plage pour la note G3 à l&apos;aide du curseur.</li>
<li>Cliquez sur le bouton "Afficher les graphiques" pour générer les graphiques.</li>
</ul>')
),
tabItem(tabName = "graphiques",
uiOutput("plots_ui")  # Créer une sortie dynamique pour les graphiques
)
)
),
skin = "black"
# Définir le dictionnaire des explications au niveau de l'environnement global
explanations <- list(
school = "student's school (binary: 'GP' - Gabriel Pereira or 'MS' - Mousinho da Silveira)",
sex = "student's sex (binary: 'F' - female or 'M' - male)",
age = "student's age (numeric: from 15 to 22)",
address = "student's home address type (binary: 'U' - urban or 'R' - rural)",
famsize = "family size (binary: 'LE3' - less or equal to 3 or 'GT3' - greater than 3)",
Pstatus = "parent's cohabitation status (binary: 'T' - living together or 'A' - apart)",
Medu = "mother's education (numeric: 0 - none, 1 - primary education (4th grade), 2 – 5th to 9th grade, 3 – secondary education or 4 – higher education)",
Fedu = "father's education (numeric: 0 - none, 1 - primary education (4th grade), 2 – 5th to 9th grade, 3 – secondary education or 4 – higher education)",
Mjob = "mother's job (nominal: 'teacher', 'health' care related, civil 'services' (e.g. administrative or police), 'at_home' or 'other')",
Fjob = "father's job (nominal: 'teacher', 'health' care related, civil 'services' (e.g. administrative or police), 'at_home' or 'other')",
reason = "reason to choose this school (nominal: close to 'home', school 'reputation', 'course' preference or 'other')",
guardian = "student's guardian (nominal: 'mother', 'father' or 'other')",
traveltime = "home to school travel time (numeric: 1 - <15 min., 2 - 15 to 30 min., 3 - 30 min. to 1 hour, or 4 - >1 hour)",
studytime = "weekly study time (numeric: 1 - <2 hours, 2 - 2 to 5 hours, 3 - 5 to 10 hours, or 4 - >10 hours)",
failures = "number of past class failures (numeric: n if 1<=n<3, else 4)",
schoolsup = "extra educational support (binary: yes or no)",
famsup = "family educational support (binary: yes or no)",
paid = "extra paid classes within the course subject (Math or Portuguese) (binary: yes or no)",
activities = "extra-curricular activities (binary: yes or no)",
nursery = "attended nursery school (binary: yes or no)",
higher = "wants to take higher education (binary: yes or no)",
internet = "Internet access at home (binary: yes or no)",
romantic = "with a romantic relationship (binary: yes or no)",
famrel = "quality of family relationships (numeric: from 1 - very bad to 5 - excellent)",
freetime = "free time after school (numeric: from 1 - very low to 5 - very high)",
goout = "going out with friends (numeric: from 1 - very low to 5 - very high)",
Dalc = "workday alcohol consumption (numeric: from 1 - very low to 5 - very high)",
Walc = "weekend alcohol consumption (numeric: from 1 - very low to 5 - very high)",
health = "current health status (numeric: from 1 - very bad to 5 - very good)",
absences = "number of school absences (numeric: from 0 to 93)",
G1 = "first period grade (numeric: from 0 to 20)",
G2 = "second period grade (numeric: from 0 to 20)",
G3 = "final grade (numeric: from 0 to 20, output target)"
)
library(shiny)
library(shinydashboard)
library(readxl)
library(dplyr)
library(ggplot2)
library(plotly)
# Charger les données depuis un fichier Excel
data <- read_excel("student-mat.xlsx")
ui <- dashboardPage(
dashboardHeader(title = "Test"),
dashboardSidebar(
sidebarMenu(
menuItem("Introduction", tabName = "introduction", icon = icon("info-circle")),
menuItem("Graphiques", tabName = "graphiques", icon = icon("chart-bar"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "introduction",
h2("Bienvenue dans l'application d'exploration des données !"),
p("Sélectionnez les variables que vous souhaitez explorer et cliquez sur 'Afficher les graphiques' pour voir les graphiques correspondants."),
br(),
h3("Instructions :"),
selectInput("variables", "Choisir des variables", multiple = TRUE, choices = colnames(data)),
sliderInput("g3_range", "Sélectionnez la plage pour la note G3",
min = 0, max = 20, value = c(0, 20)),
actionButton("plot_button", "Afficher les graphiques"),
HTML('<ul>
<li>Sélectionnez une ou plusieurs variables à partir du menu déroulant.</li>
<li>Sélectionnez la plage pour la note G3 à l&apos;aide du curseur.</li>
<li>Cliquez sur le bouton "Afficher les graphiques" pour générer les graphiques.</li>
</ul>')
),
tabItem(tabName = "graphiques",
uiOutput("plots_ui")
)
)
),
skin = "black"
)
# Définir le dictionnaire des explications au niveau de l'environnement global
explanations <- list(
school = "student's school (binary: 'GP' - Gabriel Pereira or 'MS' - Mousinho da Silveira)",
sex = "student's sex (binary: 'F' - female or 'M' - male)",
age = "student's age (numeric: from 15 to 22)",
address = "student's home address type (binary: 'U' - urban or 'R' - rural)",
famsize = "family size (binary: 'LE3' - less or equal to 3 or 'GT3' - greater than 3)",
Pstatus = "parent's cohabitation status (binary: 'T' - living together or 'A' - apart)",
Medu = "mother's education (numeric: 0 - none, 1 - primary education (4th grade), 2 – 5th to 9th grade, 3 – secondary education or 4 – higher education)",
Fedu = "father's education (numeric: 0 - none, 1 - primary education (4th grade), 2 – 5th to 9th grade, 3 – secondary education or 4 – higher education)",
Mjob = "mother's job (nominal: 'teacher', 'health' care related, civil 'services' (e.g. administrative or police), 'at_home' or 'other')",
Fjob = "father's job (nominal: 'teacher', 'health' care related, civil 'services' (e.g. administrative or police), 'at_home' or 'other')",
reason = "reason to choose this school (nominal: close to 'home', school 'reputation', 'course' preference or 'other')",
guardian = "student's guardian (nominal: 'mother', 'father' or 'other')",
traveltime = "home to school travel time (numeric: 1 - <15 min., 2 - 15 to 30 min., 3 - 30 min. to 1 hour, or 4 - >1 hour)",
studytime = "weekly study time (numeric: 1 - <2 hours, 2 - 2 to 5 hours, 3 - 5 to 10 hours, or 4 - >10 hours)",
failures = "number of past class failures (numeric: n if 1<=n<3, else 4)",
schoolsup = "extra educational support (binary: yes or no)",
famsup = "family educational support (binary: yes or no)",
paid = "extra paid classes within the course subject (Math or Portuguese) (binary: yes or no)",
activities = "extra-curricular activities (binary: yes or no)",
nursery = "attended nursery school (binary: yes or no)",
higher = "wants to take higher education (binary: yes or no)",
internet = "Internet access at home (binary: yes or no)",
romantic = "with a romantic relationship (binary: yes or no)",
famrel = "quality of family relationships (numeric: from 1 - very bad to 5 - excellent)",
freetime = "free time after school (numeric: from 1 - very low to 5 - very high)",
goout = "going out with friends (numeric: from 1 - very low to 5 - very high)",
Dalc = "workday alcohol consumption (numeric: from 1 - very low to 5 - very high)",
Walc = "weekend alcohol consumption (numeric: from 1 - very low to 5 - very high)",
health = "current health status (numeric: from 1 - very bad to 5 - very good)",
absences = "number of school absences (numeric: from 0 to 93)",
G1 = "first period grade (numeric: from 0 to 20)",
G2 = "second period grade (numeric: from 0 to 20)",
G3 = "final grade (numeric: from 0 to 20, output target)"
)
server <- function(input, output, session) {
observeEvent(input$plot_button, {
selected_variables <- input$variables
g3_range <- input$g3_range
filtered_data <- data %>%
filter(G3 >= g3_range[1] & G3 <= g3_range[2])
plots <- list()
for (variable in selected_variables) {
plot_data <- ggplot(filtered_data, aes(x = .data[[variable]])) +
geom_bar(fill = "turquoise") +
labs(x = variable, y = "Fréquence") +
ggtitle(explanations[[variable]]) +
theme(plot.title = element_text(hjust = 0.5, size = 10))
plotly_plot <- ggplotly(plot_data)
plots[[variable]] <- plotly_plot
}
output$plots_ui <- renderUI({
if (length(plots) == 0) {
return(NULL)
}
tagList(plots)
})
updateTabsetPanel(session, "tabs", selected = "graphiques")
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(readxl)
library(dplyr)
library(ggplot2)
library(plotly)
# Charger les données depuis un fichier Excel
data <- read_excel("student-mat.xlsx")
ui <- dashboardPage(
dashboardHeader(title = "Test"),
dashboardSidebar(
sidebarMenu(
menuItem("Introduction", tabName = "introduction", icon = icon("info-circle"),
menusubItem("Graphiques", tabName = "graphiques", icon = icon("chart-bar")))
)),
dashboardBody(
tabItems(
tabItem(tabName = "introduction",
h2("Bienvenue dans l'application d'exploration des données !"),
p("Sélectionnez les variables que vous souhaitez explorer et cliquez sur 'Afficher les graphiques' pour voir les graphiques correspondants."),
br(),
h3("Instructions :"),
selectInput("variables", "Choisir des variables", multiple = TRUE, choices = colnames(data)),
sliderInput("g3_range", "Sélectionnez la plage pour la note G3",
min = 0, max = 20, value = c(0, 20)),
actionButton("plot_button", "Afficher les graphiques"),
HTML('<ul>
<li>Sélectionnez une ou plusieurs variables à partir du menu déroulant.</li>
<li>Sélectionnez la plage pour la note G3 à l&apos;aide du curseur.</li>
<li>Cliquez sur le bouton "Afficher les graphiques" pour générer les graphiques.</li>
</ul>')
),
tabItem(tabName = "graphiques",
uiOutput("plots_ui")
)
)
),
skin = "black"
)
# Définir le dictionnaire des explications au niveau de l'environnement global
explanations <- list(
school = "student's school (binary: 'GP' - Gabriel Pereira or 'MS' - Mousinho da Silveira)",
sex = "student's sex (binary: 'F' - female or 'M' - male)",
age = "student's age (numeric: from 15 to 22)",
address = "student's home address type (binary: 'U' - urban or 'R' - rural)",
famsize = "family size (binary: 'LE3' - less or equal to 3 or 'GT3' - greater than 3)",
Pstatus = "parent's cohabitation status (binary: 'T' - living together or 'A' - apart)",
Medu = "mother's education (numeric: 0 - none, 1 - primary education (4th grade), 2 – 5th to 9th grade, 3 – secondary education or 4 – higher education)",
Fedu = "father's education (numeric: 0 - none, 1 - primary education (4th grade), 2 – 5th to 9th grade, 3 – secondary education or 4 – higher education)",
Mjob = "mother's job (nominal: 'teacher', 'health' care related, civil 'services' (e.g. administrative or police), 'at_home' or 'other')",
Fjob = "father's job (nominal: 'teacher', 'health' care related, civil 'services' (e.g. administrative or police), 'at_home' or 'other')",
reason = "reason to choose this school (nominal: close to 'home', school 'reputation', 'course' preference or 'other')",
guardian = "student's guardian (nominal: 'mother', 'father' or 'other')",
traveltime = "home to school travel time (numeric: 1 - <15 min., 2 - 15 to 30 min., 3 - 30 min. to 1 hour, or 4 - >1 hour)",
studytime = "weekly study time (numeric: 1 - <2 hours, 2 - 2 to 5 hours, 3 - 5 to 10 hours, or 4 - >10 hours)",
failures = "number of past class failures (numeric: n if 1<=n<3, else 4)",
schoolsup = "extra educational support (binary: yes or no)",
famsup = "family educational support (binary: yes or no)",
paid = "extra paid classes within the course subject (Math or Portuguese) (binary: yes or no)",
activities = "extra-curricular activities (binary: yes or no)",
nursery = "attended nursery school (binary: yes or no)",
higher = "wants to take higher education (binary: yes or no)",
internet = "Internet access at home (binary: yes or no)",
romantic = "with a romantic relationship (binary: yes or no)",
famrel = "quality of family relationships (numeric: from 1 - very bad to 5 - excellent)",
freetime = "free time after school (numeric: from 1 - very low to 5 - very high)",
goout = "going out with friends (numeric: from 1 - very low to 5 - very high)",
Dalc = "workday alcohol consumption (numeric: from 1 - very low to 5 - very high)",
Walc = "weekend alcohol consumption (numeric: from 1 - very low to 5 - very high)",
health = "current health status (numeric: from 1 - very bad to 5 - very good)",
absences = "number of school absences (numeric: from 0 to 93)",
G1 = "first period grade (numeric: from 0 to 20)",
G2 = "second period grade (numeric: from 0 to 20)",
G3 = "final grade (numeric: from 0 to 20, output target)"
)
server <- function(input, output, session) {
observeEvent(input$plot_button, {
selected_variables <- input$variables
g3_range <- input$g3_range
filtered_data <- data %>%
filter(G3 >= g3_range[1] & G3 <= g3_range[2])
plots <- list()
for (variable in selected_variables) {
plot_data <- ggplot(filtered_data, aes(x = .data[[variable]])) +
geom_bar(fill = "turquoise") +
labs(x = variable, y = "Fréquence") +
ggtitle(explanations[[variable]]) +
theme(plot.title = element_text(hjust = 0.5, size = 10))
plotly_plot <- ggplotly(plot_data)
plots[[variable]] <- plotly_plot
}
output$plots_ui <- renderUI({
if (length(plots) == 0) {
return(NULL)
}
tagList(plots)
})
updateTabsetPanel(session, "tabs", selected = "graphiques")
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(readxl)
library(dplyr)
library(ggplot2)
library(plotly)
# Charger les données depuis un fichier Excel
data <- read_excel("student-mat.xlsx")
ui <- dashboardPage(
dashboardHeader(title = "Test"),
dashboardSidebar(
sidebarMenu(
menuItem("Introduction", tabName = "introduction", icon = icon("info-circle"),
menusubItem("Graphiques", tabName = "graphiques", icon = icon("chart-bar")))
)),
dashboardBody(
tabItems(
tabItem(tabName = "introduction",
h2("Bienvenue dans l'application d'exploration des données !"),
p("Sélectionnez les variables que vous souhaitez explorer et cliquez sur 'Afficher les graphiques' pour voir les graphiques correspondants."),
br(),
h3("Instructions :"),
selectInput("variables", "Choisir des variables", multiple = TRUE, choices = colnames(data)),
sliderInput("g3_range", "Sélectionnez la plage pour la note G3",
min = 0, max = 20, value = c(0, 20)),
actionButton("plot_button", "Afficher les graphiques"),
HTML('<ul>
<li>Sélectionnez une ou plusieurs variables à partir du menu déroulant.</li>
<li>Sélectionnez la plage pour la note G3 à l&apos;aide du curseur.</li>
<li>Cliquez sur le bouton "Afficher les graphiques" pour générer les graphiques.</li>
</ul>')
),
tabItem(tabName = "graphiques",
uiOutput("plots_ui")
)
)
),
skin = "black"
)
# Définir le dictionnaire des explications au niveau de l'environnement global
explanations <- list(
school = "student's school (binary: 'GP' - Gabriel Pereira or 'MS' - Mousinho da Silveira)",
sex = "student's sex (binary: 'F' - female or 'M' - male)",
age = "student's age (numeric: from 15 to 22)",
address = "student's home address type (binary: 'U' - urban or 'R' - rural)",
famsize = "family size (binary: 'LE3' - less or equal to 3 or 'GT3' - greater than 3)",
Pstatus = "parent's cohabitation status (binary: 'T' - living together or 'A' - apart)",
Medu = "mother's education (numeric: 0 - none, 1 - primary education (4th grade), 2 – 5th to 9th grade, 3 – secondary education or 4 – higher education)",
Fedu = "father's education (numeric: 0 - none, 1 - primary education (4th grade), 2 – 5th to 9th grade, 3 – secondary education or 4 – higher education)",
Mjob = "mother's job (nominal: 'teacher', 'health' care related, civil 'services' (e.g. administrative or police), 'at_home' or 'other')",
Fjob = "father's job (nominal: 'teacher', 'health' care related, civil 'services' (e.g. administrative or police), 'at_home' or 'other')",
reason = "reason to choose this school (nominal: close to 'home', school 'reputation', 'course' preference or 'other')",
guardian = "student's guardian (nominal: 'mother', 'father' or 'other')",
traveltime = "home to school travel time (numeric: 1 - <15 min., 2 - 15 to 30 min., 3 - 30 min. to 1 hour, or 4 - >1 hour)",
studytime = "weekly study time (numeric: 1 - <2 hours, 2 - 2 to 5 hours, 3 - 5 to 10 hours, or 4 - >10 hours)",
failures = "number of past class failures (numeric: n if 1<=n<3, else 4)",
schoolsup = "extra educational support (binary: yes or no)",
famsup = "family educational support (binary: yes or no)",
paid = "extra paid classes within the course subject (Math or Portuguese) (binary: yes or no)",
activities = "extra-curricular activities (binary: yes or no)",
nursery = "attended nursery school (binary: yes or no)",
higher = "wants to take higher education (binary: yes or no)",
internet = "Internet access at home (binary: yes or no)",
romantic = "with a romantic relationship (binary: yes or no)",
famrel = "quality of family relationships (numeric: from 1 - very bad to 5 - excellent)",
freetime = "free time after school (numeric: from 1 - very low to 5 - very high)",
goout = "going out with friends (numeric: from 1 - very low to 5 - very high)",
Dalc = "workday alcohol consumption (numeric: from 1 - very low to 5 - very high)",
Walc = "weekend alcohol consumption (numeric: from 1 - very low to 5 - very high)",
health = "current health status (numeric: from 1 - very bad to 5 - very good)",
absences = "number of school absences (numeric: from 0 to 93)",
G1 = "first period grade (numeric: from 0 to 20)",
G2 = "second period grade (numeric: from 0 to 20)",
G3 = "final grade (numeric: from 0 to 20, output target)"
)
server <- function(input, output, session) {
observeEvent(input$plot_button, {
selected_variables <- input$variables
g3_range <- input$g3_range
filtered_data <- data %>%
filter(G3 >= g3_range[1] & G3 <= g3_range[2])
plots <- list()
for (variable in selected_variables) {
plot_data <- ggplot(filtered_data, aes(x = .data[[variable]])) +
geom_bar(fill = "turquoise") +
labs(x = variable, y = "Fréquence") +
ggtitle(explanations[[variable]]) +
theme(plot.title = element_text(hjust = 0.5, size = 10))
plotly_plot <- ggplotly(plot_data)
plots[[variable]] <- plotly_plot
}
output$plots_ui <- renderUI({
if (length(plots) == 0) {
return(NULL)
}
tagList(plots)
})
updateTabsetPanel(session, "tabs", selected = "graphiques")
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(readxl)
library(dplyr)
library(ggplot2)
library(plotly)
# Charger les données depuis un fichier Excel
data <- read_excel("student-mat.xlsx")
ui <- dashboardPage(
dashboardHeader(title = "Test"),
dashboardSidebar(
sidebarMenu(
menuItem("Introduction", tabName = "introduction", icon = icon("info-circle"),
menusubItem("Graphiques", tabName = "graphiques", icon = icon("chart-bar")))
)),
dashboardBody(
tabItems(
tabItem(tabName = "introduction",
h2("Bienvenue dans l'application d'exploration des données !"),
p("Sélectionnez les variables que vous souhaitez explorer et cliquez sur 'Afficher les graphiques' pour voir les graphiques correspondants."),
br(),
h3("Instructions :"),
selectInput("variables", "Choisir des variables", multiple = TRUE, choices = colnames(data)),
sliderInput("g3_range", "Sélectionnez la plage pour la note G3",
min = 0, max = 20, value = c(0, 20)),
actionButton("plot_button", "Afficher les graphiques"),
HTML('<ul>
<li>Sélectionnez une ou plusieurs variables à partir du menu déroulant.</li>
<li>Sélectionnez la plage pour la note G3 à l&apos;aide du curseur.</li>
<li>Cliquez sur le bouton "Afficher les graphiques" pour générer les graphiques.</li>
</ul>')
),
tabItem(tabName = "graphiques",
uiOutput("plots_ui")
)
)
),
skin = "black"
)
# Définir le dictionnaire des explications au niveau de l'environnement global
explanations <- list(
school = "student's school (binary: 'GP' - Gabriel Pereira or 'MS' - Mousinho da Silveira)",
sex = "student's sex (binary: 'F' - female or 'M' - male)",
age = "student's age (numeric: from 15 to 22)",
address = "student's home address type (binary: 'U' - urban or 'R' - rural)",
famsize = "family size (binary: 'LE3' - less or equal to 3 or 'GT3' - greater than 3)",
Pstatus = "parent's cohabitation status (binary: 'T' - living together or 'A' - apart)",
Medu = "mother's education (numeric: 0 - none, 1 - primary education (4th grade), 2 – 5th to 9th grade, 3 – secondary education or 4 – higher education)",
Fedu = "father's education (numeric: 0 - none, 1 - primary education (4th grade), 2 – 5th to 9th grade, 3 – secondary education or 4 – higher education)",
Mjob = "mother's job (nominal: 'teacher', 'health' care related, civil 'services' (e.g. administrative or police), 'at_home' or 'other')",
Fjob = "father's job (nominal: 'teacher', 'health' care related, civil 'services' (e.g. administrative or police), 'at_home' or 'other')",
reason = "reason to choose this school (nominal: close to 'home', school 'reputation', 'course' preference or 'other')",
guardian = "student's guardian (nominal: 'mother', 'father' or 'other')",
traveltime = "home to school travel time (numeric: 1 - <15 min., 2 - 15 to 30 min., 3 - 30 min. to 1 hour, or 4 - >1 hour)",
studytime = "weekly study time (numeric: 1 - <2 hours, 2 - 2 to 5 hours, 3 - 5 to 10 hours, or 4 - >10 hours)",
failures = "number of past class failures (numeric: n if 1<=n<3, else 4)",
schoolsup = "extra educational support (binary: yes or no)",
famsup = "family educational support (binary: yes or no)",
paid = "extra paid classes within the course subject (Math or Portuguese) (binary: yes or no)",
activities = "extra-curricular activities (binary: yes or no)",
nursery = "attended nursery school (binary: yes or no)",
higher = "wants to take higher education (binary: yes or no)",
internet = "Internet access at home (binary: yes or no)",
romantic = "with a romantic relationship (binary: yes or no)",
famrel = "quality of family relationships (numeric: from 1 - very bad to 5 - excellent)",
freetime = "free time after school (numeric: from 1 - very low to 5 - very high)",
goout = "going out with friends (numeric: from 1 - very low to 5 - very high)",
Dalc = "workday alcohol consumption (numeric: from 1 - very low to 5 - very high)",
Walc = "weekend alcohol consumption (numeric: from 1 - very low to 5 - very high)",
health = "current health status (numeric: from 1 - very bad to 5 - very good)",
absences = "number of school absences (numeric: from 0 to 93)",
G1 = "first period grade (numeric: from 0 to 20)",
G2 = "second period grade (numeric: from 0 to 20)",
G3 = "final grade (numeric: from 0 to 20, output target)"
)
server <- function(input, output, session) {
observeEvent(input$plot_button, {
selected_variables <- input$variables
g3_range <- input$g3_range
filtered_data <- data %>%
filter(G3 >= g3_range[1] & G3 <= g3_range[2])
plots <- list()
for (variable in selected_variables) {
plot_data <- ggplot(filtered_data, aes(x = .data[[variable]])) +
geom_bar(fill = "turquoise") +
labs(x = variable, y = "Fréquence") +
ggtitle(explanations[[variable]]) +
theme(plot.title = element_text(hjust = 0.5, size = 10))
plotly_plot <- ggplotly(plot_data)
plots[[variable]] <- plotly_plot
}
output$plots_ui <- renderUI({
if (length(plots) == 0) {
return(NULL)
}
tagList(plots)
})
updateTabsetPanel(session, "tabs", selected = "graphiques")
})
}
shinyApp(ui, server)
